{"id":827925816,"lang":"python","lang_name":"Python","time":"2 weeks, 5 days","timestamp":1666445854,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/827925816/","is_pending":"Not Pending","title":"Find a Corresponding Node of a Binary Tree in a Clone of That Tree","memory":"30.7 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def getTargetCopy(self, original, cloned, target):\n        \"\"\"\n        :type original: TreeNode\n        :type cloned: TreeNode\n        :type target: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        node = original\n        clon = cloned\n        stackOrg = []\n        stackCloned = []\n        \n        while node is not None:\n            if node.val == target.val:\n                if target.val == clon.val:\n                    return clon\n                \n            if node.left is not None:\n                print(node.left.val)\n                stackOrg.append(node.left)\n                stackCloned.append(clon.left)\n                \n            if node.right is not None:\n                print(node.right.val)\n                stackOrg.append(node.right)\n                stackCloned.append(clon.right)\n            node = stackOrg.pop()\n            clon = stackCloned.pop()\n            \n            \n        \n            ","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree","has_notes":false,"notes":"","topic_tags":[]}